// Generated by CoffeeScript 1.3.3
(function() {
  var Learn;

  this.Learn = Learn = (function() {

    function Learn(nStates, nActions, gamma, alpha) {
      var actionIter, iter, state, stateMatrix, _i, _j, _ref, _ref1;
      this.nStates = nStates;
      this.nActions = nActions;
      this.gamma = gamma != null ? gamma : 0.5;
      this.alpha = alpha != null ? alpha : 0.6;
      this.Q = [];
      for (actionIter = _i = 0, _ref = this.nActions; 0 <= _ref ? _i < _ref : _i > _ref; actionIter = 0 <= _ref ? ++_i : --_i) {
        state = zeros(this.nStates.length);
        stateMatrix = {};
        for (iter = _j = 0, _ref1 = this.nStates.prod(); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; iter = 0 <= _ref1 ? ++_j : --_j) {
          stateMatrix[state] = 10 * Math.random();
          state = this.incrementState(state);
        }
        this.Q.push(stateMatrix);
      }
    }

    Learn.prototype.incrementState = function(state) {
      var i, j, _i, _j, _ref;
      for (i = _i = 0, _ref = state.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (state[i] < this.nStates[i]) {
          state[i] += 1;
          for (j = _j = 0; 0 <= i ? _j < i : _j > i; j = 0 <= i ? ++_j : --_j) {
            state[j] = 0;
          }
          return state;
        }
      }
      return state;
    };

    Learn.prototype.maxAction = function(state) {
      var a, bestFitness, _i, _ref;
      bestFitness = -Infinity;
      for (a = _i = 0, _ref = this.nActions; 0 <= _ref ? _i < _ref : _i > _ref; a = 0 <= _ref ? ++_i : --_i) {
        if (this.Q[a][state] > bestFitness) {
          bestFitness = this.Q[a][state];
        }
      }
      return bestFitness;
    };

    Learn.prototype.update = function(actionTaken, oldState, newState, reward) {
      var bestQ;
      bestQ = this.maxAction(newState);
      try {
        return this.Q[actionTaken][oldState] += this.alpha * (reward + this.gamma * bestQ - this.Q[actionTaken][oldState]);
      } catch (error) {
        console.log('Error');
        return console.log(actionTaken, oldState[0], oldState[1], reward);
      }
    };

    Learn.prototype.selectAction = function(state, epsilon) {
      var action, bestAction, bestFitness, _i, _ref;
      if (epsilon == null) {
        epsilon = 0;
      }
      if (Math.random() > epsilon) {
        bestFitness = -Infinity;
        bestAction = -1;
        for (action = _i = 0, _ref = this.nActions; 0 <= _ref ? _i < _ref : _i > _ref; action = 0 <= _ref ? ++_i : --_i) {
          if (this.Q[action][state] > bestFitness) {
            bestAction = action;
            bestFitness = this.Q[action][state];
          }
        }
        return bestAction;
      } else {
        return Math.floor(Math.random() * this.nActions);
      }
    };

    return Learn;

  })();

}).call(this);
