// Generated by CoffeeScript 1.3.3
(function() {

  this.directives = angular.module('directives', []);

  this.directives.directive('westside', function() {
    return {
      restrict: 'A',
      replace: true,
      template: '<div id="westside" class="westside"></div>',
      link: function(scope, element, attrs) {
        var Q, agent, agents, alpha, drag, dragmove, epsilon, height, numAgents, redraw, reset, stopSimulation, svg, tick, toggleSimulation, tree, width;
        width = $(element).width();
        height = 400;
        numAgents = 50;
        stopSimulation = true;
        alpha = 0.6;
        epsilon = 0.1;
        agents = [];
        Q = new Learn([30, 30, 2], 5);
        tree = new kdTree(agents, distance, ['x', 'y']);
        svg = d3.select('#westside').insert('svg:svg').attr('width', width).attr('height', height);
        svg.append('circle').attr('class', 'jets').attr('cx', 0.75 * width).attr('cy', 0.5 * height).attr('r', 100).attr('stroke', '#7f8c8d').attr('stroke-width', 2).attr('fill', '#efefef').attr('opacity', 0.8);
        svg.append('circle').attr('class', 'sharks').attr('cx', 0.25 * width).attr('cy', 0.5 * height).attr('r', 100).attr('stroke', '#7f8c8d').attr('stroke-width', 2).attr('fill', '#efefef').attr('opacity', 0.8);
        agent = svg.selectAll('circle.agent');
        dragmove = function() {
          return d3.select(this).attr('cx', function(d) {
            return d.x = d3.event.x;
          }).attr('cy', function(d) {
            return d.y = d3.event.y;
          });
        };
        drag = d3.behavior.drag().on("drag", dragmove);
        redraw = function() {
          var theAgents;
          theAgents = agent.data(agents);
          return theAgents.enter().insert('circle').attr('class', 'agent').attr('cx', function(d) {
            return d.x;
          }).attr('cy', function(d) {
            return d.y;
          }).attr('r', function(d) {
            return d.radius;
          }).attr('class', function(d) {
            if (d.gang) {
              return 'agent shark';
            } else {
              return 'agent jet';
            }
          }).call(drag);
        };
        reset = function() {
          var index, _i;
          agents = [];
          svg.selectAll('circle.agent').data([]).exit().remove();
          for (index = _i = 0; 0 <= numAgents ? _i < numAgents : _i > numAgents; index = 0 <= numAgents ? ++_i : --_i) {
            agents.push(new Agent(index, width, height, 6));
          }
          tree = new kdTree(agents, distance, ['x', 'y']);
          window.tree = tree;
          return redraw();
        };
        tick = function() {
          var a, newState, oldState, selectedAction, _i, _len;
          for (_i = 0, _len = agents.length; _i < _len; _i++) {
            a = agents[_i];
            oldState = a.state();
            selectedAction = a.takeNextAction();
            newState = a.update();
            a.nextAction = Q.sarsa(selectedAction, oldState, newState, a.reward());
          }
          svg.selectAll('circle.agent').attr('cx', function(d) {
            return d.x;
          }).attr('cy', function(d) {
            return d.y;
          });
          return stopSimulation;
        };
        toggleSimulation = function() {
          stopSimulation = !stopSimulation;
          if (!stopSimulation) {
            return d3.timer(tick);
          }
        };
        reset();
        svg.on('dblclick', reset);
        return svg.on('click', toggleSimulation);
      }
    };
  });

}).call(this);
